   
   一、类、类的继承
   
   1、类是组成Java程序的基本要素，它封装了一类对象的状态和方法 
   它将变量与函数封装到一个类中。
     （1）字段（field）是类的属性，是用变量来表示的。
   字段又称为域、域变量、属性、成员变量等 
     （2）方法（method）是类的功能和操作, 是用函数来表示的
      
    2、java是使用引用来访问对象的，需要用运算符“．”，而且引用是有类型的。
       使用引用访问对象的好处是：封装型、安全性。
       
    3、函数重载：多个方法有相同的名字。
       重载的方法的签名不同，也就是参数个数不同或参数的类型不同。
       通过方法重载可以实现多态。
       
    4、使用this解决局部变量与域同名的问题
       构造方法中，用this调用另一构造方法，必须放在第一句 
       
    5、Java支持单继承：一个类只能有一个直接父类。 
      （1）子类继承父类的状态和行为 
      （2）可以修改父类的状态或重载父类的行为 
      （3）可以添加新的状态和行为
       好处：可以提高程序的抽象程度 ，实现代码重用，提高开发效率和可维护性
       继承实现：Java中的继承是通过extends关键字来实现的 
       如果没有extends子句，则该类默认为java.lang.Object的子类。 
       所有的类都是通过直接或间接地继承java.lang.Object得到的。
        
    6、字段：
       （1）字段的继承：
		子类可以继承父类的所有字段  
       （2）字段的隐藏： 
		子类重新定义一个与从父类那里继承来的域变量完全相同的变量，称为域的隐藏
       （3）字段的添加： 
		在定义子类时，加上新的域变量，就可以使子类比父类多一些属性。 
    
    7、方法：
       （1）方法的继承：
		父类的非私有方法也可以被子类自动继承。
       （2）方法的覆盖：
		子类也可以重新定义与父类同名的方法，实现对父类方法的覆盖(Override)。
		通过方法的覆盖，能够修改对象的同名方法的具体实现方法。
		@Override  //JDK1.5以后可以用这个注记来表示(不用也是可以的）
       （3）方法的添加：
		子类可以新加一些方法，以针对子类实现相应的功能 
       （4）方法的重载：
		可以重载父类的同名方法。与方法覆盖不同的是，重载不要求参数 类型列表相同。			
    重载的方法实际是新加的方法。 	

    8、super 的使用（1）
       （1）使用super访问父类的域和方法：
		正是由于继承，使用this可以访问父类的域和方法。
		但有时为了明确地指明父类的域和方法，就要用关 键字super。
 		Student的父类有一个域age，在子类Student中用age, this.age, super.age来访问age是完全一样的。
    当然，使用super不能访问在子类中添加的域和方法。
       （2）有时需要使用super以区别同名的域与方法：
		使用super可以访问被子类所隐藏了的同名变量。 
		在覆盖父类的方法的同时，又利用已定义好的父类的方法 
    
    9、super 的使用（2）
       子类在构造方法中，可以用super来调用父类的构造方法
       使用时，super()必须放在第一句。
       
    10、父类对象与子类对象的转换
	  类似于基本数据类型数据之间的强制类型转换，存在继承关系的父类对象和 子类对象之间也	可以在一定条件下相互转换。  
	     (1) 子类对象可以被视为其父类的一个对象 如一个Student对象也是一个Person对象。  	
       (2) 父类对象不能被当做其某一个子类的对象。  
	     (3) 如果一个方法的形式参数定义的是父类对象，那么调用这个方法时，可以使用子类对象作为实际参数。 
	     (4) 如果父类对象引用指向的实际是一个子类对象，那么这个父类对象的引用可以用强制类型转换（casting)成子类对象的引用。
       
    二、包
    
    1、包及子包的定义，实际上是为了解决名字空间、名字冲突 它与类的继承没有关系。
    事实上，一个子类与其父类可以位于不同的包中。
    
    2、包有两方面的含义：
    一是名字空间、存储路径（文件夹）
    一是可访问性（同一包中的各个类，默认情况下可互相访问）
    
    3、包层次的根目录是由环境变量CLASSPATH来确定的。
    在简单情况下，没有package语句，这时称为无名包
    
    4、Java的JDK提供了很多包：
    java.applet，java.awt，java.awt.image，java.awt.peer，java.io， 
    java.lang，java.net，java.util，javax.swing，等。
    
    5、import语句的格式为： import package1[.package2…]. (classname |*); 
    
    三、访问控制符
    
    1、修饰符（modifiers）可以修饰类、也可以修饰类的成员（字段、方法），分为两类：
    访问修饰符（access modifiers）： 如public/private等
    其他修饰符：如abstract等
    
    2、setter 与getter
    将字段用private修饰，从而更好地将信息进行封装和隐藏。
    用setXXXX和getXXXX方法对类的属性进行存取，分别称为setter与getter。
    这种方法有以下优点：
    （1）属性用private更好地封装和隐藏，外部类不能随意存取和修改。
    （2）提供方法来存取对象的属性，在方法中可以对给定的参数的合法性进行检验。
    （3）方法可以用来给出计算后的值。
    （4）方法可以完成其他必要的工作（如清理资源、设定状态，等等）。 
    （5）只提供getXXXX方法，而不提供setXXXX方法，可以保证属性是只读的。
    
    3、其他修饰符，非访问控制符： 
    static（静态的、非实例的、类的） 可以修饰内部类，可以修饰成员
    final（最终的、不可改变的）可以修饰类，可以修饰成员，可以修饰局部变量
    abstract（抽象的、不可实例化的）可以修饰类，可以修饰成员
    
    4、static 字段：
    静态字段最本质的特点是： 它们是类的字段，不属于任何一个对象实例。 
    
    5、static 方法：
    用static修饰符修饰的方法仅属于类的静态方法，又称为类方法。
    类方法的本质是该方法是属于整个类的，不是属于某个实例的。 
    声明一个方法为static有以下几重含义
    (1) 非static的方法是属于某个对象的方法，在这个对象创建时，对象 的方法在内存中拥有自己专用的代码段。
    而static的方法是属于整个类 的，它在内存中的代码段将随着类的定义而进行分配和装载，不被任 何一个对象专有。
    (2) 由于static方法是属于整个类的，所以它不能操纵和处理属于某个对象 的成员变量，
    而只能处理属于整个类的成员变量，即static方法只能处理本 类中的static域或调用static方法。
    (3) static方法中，不能访问实例变量，不能使用this 或super。
    (4) 调用这个方法时，应该使用类名直接调用，也可以用某一个具体的对象名。 
    
    6、import static
    import static java.lang.System.*;
    out.println();表示System.out.println();
    
    7、final
    (1)final类:如果一个类被final修饰符所修饰和限定，说明这个类不能被继承，即不可能有子类。
    (2)final方法:final修饰符所修饰的方法，是不能被子类所覆盖的方法。
    (3)final字段及final局部变量:它们的值一旦给定，就不能更改。是只读量，它们能且只能被赋值一次，而不能被赋值多次。
    (4)一个字段被static final两个修饰符所限定时，它可以表示常量。
    (5)关于赋值:
    在定义static final域时，若不给定初始值，则按默认值进行初始化（数值为0，boolean型为false，引用型为 null）。 
    在定义final字段时，若不是static的域，则必须且只能赋值一次，不能缺省。
    这种域的赋值的方式有两种：一是在定义变量时赋初始值，二是在每一个构造函数中进行赋值。
    在定义final局部变量时，也必须且只能赋值一次。它的值可能不是常量，但它的取值在变量存在期间不会改变。
    
    8、abstract
    (1)abstract类:凡是用abstract修饰符修饰的类被称为抽象类。 抽象类不能被实例化 
    (2)abstract方法:被abstract所修饰的方法叫抽象方法，抽象方法的作用在为所有子类定义一个统一的 接口。
    对抽象方法只需声明，而不需实现，即用分号（；）而不是用{}。
    格式如下：abstract returnType abstractMethod( [paramlist] ); 
    抽象类中可以包含抽象方法，也可以不包含abstract方法。
    但是，一旦某个类中包含 了abstract方法，则这个类必须声明为abstract类。
    抽象方法在子类中必须被实现，否则子类仍然是abstract的。
    
    四、接口
    
    1、接口，某种特征的约定：
    定义接口 interface ，所有方法都自动是public abstract的
    实现接口 implements，可以实现多继承，与类的继承关系无关
    
    2、接口的作用：
    (1)通过接口可以实现不相关类的相同行为，而不需要考虑这些类之间的层次关系。从而在一定意义上实现了多重继承。
    (2)通过接口可以指明多个类需要实现的方法。
    (3)通过接口可以了解对象的交互界面，而不需了解对象所对应的类。
    
    3、接口的实现
    在类的声明中用implements子句来表示一个类使用某个接口，在类体中可以使用接口中定义的常量，
    而且必须实现接口中定义的所有方法。一个类可以实现多个接口。
    
    4、接口类型
    接口可以作为一种引用类型来使用。任何实现该接口的类的实例都可以存储在该接口类型的变量中，
    通过这些变量可以访问类所实现的接 口中的方法。Java运行时系统动态地确定该使用哪个类中的方法。
    把接口作为一种数据类型可以不需要了解对象所对应的具体的类。
    
    5、接口中的常量
    接口体中可以包含常量定义。 常量定义的格式为： type NAME = value; 
    其中type可以是任意类型，NAME是常量名，通常用大写，value是 常量值。
    在接口中定义的常量具有public, static, final的属性。
    在接口中定义的常量可以被实现该接口的多个类共享。
    枚举：
    enum Light {   Red,  Yellow, Green } 
    使用 :
    Ligth light = Light.Red; 
    switch( light ) {    case Red: ….. Break; } 
    注意：case后面不写为 Light.Red 
    
    五、语法小结
    
    1、完整的类定义
    [public] [abstact|final] class className [extends superclassName] 
    [implements InterfaceNameList]
    { //类声明 
      [public | protected | private] [static] [final] [transient] [volatile] type variableName;
      //成员变量声明，可为多个   
      [public | protected | private] [static] [final | abstract] [native] [synchronized]
      returnType methodName ( [paramList] ) //方法定义及实现，可为多个
      [throws exceptionList]{  statements }  
    }
    
    2、完整的接口定义
    [public] interface InterfaceName [extends superInterfaceList]
    { //接口声 明
      type constantName = Value; 
      //常量声明，可为多个
      retumType methodName ( [paramList] ); //方法声明，可为多个
    }
    
    3、有三种方法要求固定的声明方式
    (1) 构造方法，声明为： className( [paramlist] ){ …… }
    (2) main( )方法，声明为： public static void main ( String args[ ] ){ …… }
    (3)finalize( )方法，声明为： protected void finalize( ) throws throwable{ …… }
    
    4、完整的 java源文件
    package packageName; //指定文件中的类所在的包，0个或1个
    import packageName.[className|*]; //指定引入的类，0个或多个
    public classDefinition //属性为public的类定义，0个或1个
    interfaceDefinition and classDefinition //接口或类定义，0个或多个。
    
    源文件的名字必须与属性为public的类的类名完全相同
    在一个.java文件中，package语句和public类最多只能有1个。
