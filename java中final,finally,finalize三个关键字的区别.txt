final

当这个关键字修饰一个类时，意味着他不能派生出新的子类，也就是说不能被继承，因此一个类不能被同时声明为abstract和final。
当final修饰变量或者方法时，可以保证他们在使用中不会被改变。
被声明为final的变量必须在初始化时给定初值，以后在使用时只能被引用而不能被修改。
同样，当final修饰一个方法时，这个方法不能被重载。

finally

异常处理时提供finally来执行任何清除操作。如果抛出一个异常，那么相匹配的catch子句就会被执行，然后控制就会转入finally块。

finalize

方法名。finalize方法在垃圾回收器执行内存对象清理时会调用finalize()方法进行前期的清理工作。
这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。
它是在 Object 类中定义的，因此所有的类都继承了它。
子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。
finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。 

Java中所有类都从Object类中继承finalize()方法。
当垃圾回收器(garbage colector)决定回收某对象时，就会运行该对象的finalize()方法。
值得C++程序员注意的是，finalize()方法并不能等同与析构函数。Java中是没有析构函数的。
C++的析构函数是在对象消亡时运行的。
由于C++没有垃圾回收，对象空间手动回收，所以一旦对象用不到时，程序员就应当把它delete()掉。
所以析构函数中经常做一些文件保存之类的收尾工作。
但是在Java中很不幸，如果内存总是充足的，那么垃圾回收可能永远不会进行，
也就是说filalize()可能永远不被执行，显然指望它做收尾工作是靠不住的。
那么finalize()究竟是做什么的呢？它最主要的用途是回收特殊渠道申请的内存。
Java程序有垃圾回收器，所以一般情况下内存问题不用程序员操心。
但有一种JNI(Java Native Interface)调用non-Java程序（C或C++），finalize()的工作就是回收这部分的内存。
